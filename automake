#!/usr/bin/env python

import time
import os
from subprocess import PIPE, CalledProcessError, check_output
watchdog_imported = False
try:
  from watchdog.observers import Observer
  from watchdog.events import FileSystemEventHandler
  watchdog_imported = True
except ImportError:
  pass

class AutomakeEventHandler(FileSystemEventHandler):
  def __init__(self, command, sources):
    self.__sources = sources
    self.__command = str(command)

  def __call__(self):
    args = ['make', self.__command]
    print('Calling: %s' % args)
    try:
      check_output(args, stdin=PIPE)
    except CalledProcessError as e:
      print('Failure: %s' % e)

  def __is_watched(self, src_path):
    if os.path.exists(src_path):
      return any([os.path.samefile(src_path, s) for s in self.__sources])
    return False

  def on_any_event(self, event):
    if self.__is_watched(event.src_path):
      self()

def get_sources():
  sources = []
  filename = 'Makefile'
  if os.path.exists(filename):
    with open(filename, 'r') as f:
      for line in f.readlines():
        if ':' in line:
          sources.extend(line.split(':')[1].split())
    return [s.strip() for s in sources]
  else:
    raise RuntimeError('%s not found.' % filename)

def print_sources(sources):
  source_files = [s for s in sources if os.path.isfile(s)]
  source_dirs = [s for s in sources if os.path.isdir(s)]
  if source_files:
    print('Watched source files: %s' % source_files)
  if source_dirs:
    print('Watched source directories: %s' % source_dirs)

def automake(args):
  sources = get_sources()
  print_sources(sources)
  event_handler = AutomakeEventHandler(args.cmd, sources)
  observer = Observer()
  observer.schedule(event_handler, '.', recursive=True)
  observer.start()
  try:
      while True:
          time.sleep(1)
  except KeyboardInterrupt:
      observer.stop()
  observer.join()

if __name__ == '__main__':
  import argparse
  parser = argparse.ArgumentParser(description='Runs make automatically on source file change.')
  parser.add_argument('--cmd', default='all', help='make command (default "%(default)s")')
  args = parser.parse_args()
  if watchdog_imported:
    try:
      automake(args)
    except RuntimeError as e:
      print(e)
  else:
    print('Watchdog not available, please install it using pip: pip install watchdog')
    print('See https://pythonhosted.org/watchdog/ if you encounter any installation problems.')
